/**
 *  @file Image.h
 *
 *  @brief Contain the definition of the class who store the information
 *  about one image (labels and depth).
 *
 */

# ifndef IMAGE_H
# define IMAGE_H

# include <RGBD-RF/common.hpp>
# include "PixelInfo.h"

# define NOT_FOUND -1
# define DEFAULT_LABEL 0
# define DEFAULT_DEPTH 0x3f3f3f3f

/**
 *  @class Image
 *
 *  @brief This class is an abstract class to treat two kind of images
 *  in the program (Train images and kinect images). Bought images
 *  contain depth information.
 *
 */

class Image {

    public:

        // Aspect ration of the image
        unsigned short width;
        unsigned short height;

        // Constructors
        Image() {}
        Image(unsigned short w, unsigned short h) : width(w), height(h) {}

        /**
         *  Abstract function getDepth
         *
         *  This function returns the depth of a given pixel coordinate.
         *
         *  @param vertical pixel coordinate.
         *  @param horizontal pixel coordinate.
         *
         *  @return depth of the pixel coordinate in millimeters.
         */
         virtual unsigned getDepth(const short & x, const short & y) = 0;
};

/**
 *  @class TrainImage
 *
 *  @brief This class is designed to contain an training image (i.e, This
 *  kind of image contain the information of the depth and the labels).
 *  The information is stored in something like the Yale Format for the
 *  sparse matrixes.
 *
 *  This images are used exclusively to train the random forest
 *  algorithm. In our case we have preprocessed the real images formats
 *  lile (bmp and exr) and write them in simple plane text files so we
 *  can read them directly py the constructor.
 */

class TrainImage : public Image {

    private:

        vector <Label> pixelLabels;
        vector <unsigned> pixelDepths;
        vector <unsigned> I;
        vector <unsigned short> J;


        /** 
         * Gets the index of the content array of the element in 
         * position (x,y).
         * @param x Pixel X-axis coordinate.
         * @param y Pixel Y-axis coordinate.
         * @return index of the content array or NOT_FOUND if pixel from 
         * background.
         */
        int getIndex(const short & x, const short & y);

    public:
        int id;        
        /**
         * Image empty constructor.
         */
        TrainImage() {}


        /**
         *  Image constructor. Loads the image representation to memory.
         *  @param filename Filename of the input image in sparse 
         *  representation.
         */
        TrainImage(const string& fileName);

        /**
         * Destructor
         */        
         ~TrainImage() {}

        /**
         * Gets the label value of the pixel in position (x,y). 
         * @param x Pixel X-axis coordinate.
         * @param y Pixel Y-axis coordinate.
         * @return Label value of the pixel (x,y) or DEFAULT_LABEL if
         * label not found.
         */
        Label getLabel(const short & x, const short & y);

        /**
         * Gets the depth value of the pixel in position (x,y). 
         * @param x Pixel X-axis coordinate.
         * @param y Pixel Y-axis coordinate.
         * @return depth value of the pixel (x,y) or DEFAULT_DEPTH if
         * depth not found.
         */
        unsigned getDepth(const short & x, const short & y);

        /**
         *  getRandomCoord
         *
         *  This function get a random coordinate.
         *  @return a random coordinate of pixel.
         */
        Coord getRandomCoord();

        /**
         *  getRandCoordByLabel
         *
         *  This function get a random coord of a given label group of
         *  pixels.
         *
         *  @param type of label.
         *
         *  @return a random coordinate of pixel of the given label.
         */
        void getRandCoordByLabel(int pixNum, vector<PixelInfo>& p, int imgId);

        /**
         * Prints the content labels of the entire train image.
         * @param width Width of the image.
         * @param height Height of the image.
         */
        void print (int width, int height);
};

/**
 *  @class KinectImage
 *
 *  @brief This class contain only the depth information generated by
 *  the Kinect sensor.
 *
 */

class KinectImage : public Image {
    private:

        unsigned short *depth;
    
    public:
        
        /** 
         * Empty constructor.
         */
        KinectImage() {}

        /**
         * Class constructor.
         * @param d Pointer to array of depth values of image.
         * @param w Width of the image.
         * @param h Height of the image.
         */
        KinectImage(unsigned short *d, 
                    unsigned short w = WIDTH,
                    unsigned short h = HEIGHT) 
            : Image(w, h), depth(d) {}

        /**
         * Gets the depth value of the element in position (x,y).
         * @param x Pixel X-axis coordinate.
         * @param y Pixel Y-axis coordinate.
         * @return Depth value of the (x,y) pixel.
         */
        unsigned getDepth(const short & x, const short & y);   
};

# endif
